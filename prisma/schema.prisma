generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(cuid())
  username  String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Jasa {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String
  image       String
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String
}

model Blog {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  content     String
  image       String
  date        DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  description String
  tags        BlogTag[]
}

model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  blogs BlogTag[]
}

model BlogTag {
  blogId Int
  tagId  Int
  blog   Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([blogId, tagId])
}
